"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[851],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),u=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(a),g=n,f=p["".concat(l,".").concat(g)]||p[g]||d[g]||s;return a?r.createElement(f,o(o({ref:t},c),{},{components:a})):r.createElement(f,o({ref:t},c))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,o=new Array(s);o[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:n,o[1]=i;for(var u=2;u<s;u++)o[u]=a[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},735:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var r=a(7462),n=a(3366),s=(a(7294),a(3905)),o=["components"],i={id:"cargo",title:"Cargo Extension",sidebar_label:"Cargo"},l=void 0,u={unversionedId:"extensions/cargo",id:"extensions/cargo",title:"Cargo Extension",description:"The following section contains Cargo-specific extensions to the build server",source:"@site/generated/docs/extensions/cargo.md",sourceDirName:"extensions",slug:"/extensions/cargo",permalink:"/docs/extensions/cargo",draft:!1,editUrl:"https://github.com/build-server-protocol/build-server-protocol/edit/master/docs/extensions/cargo.md",tags:[],version:"current",lastUpdatedBy:"Miko\u0142aj Komar",lastUpdatedAt:1699698877,formattedLastUpdatedAt:"Nov 11, 2023",frontMatter:{id:"cargo",title:"Cargo Extension",sidebar_label:"Cargo"},sidebar:"docs",previous:{title:"Build Server Discovery",permalink:"/docs/overview/server-discovery"},next:{title:"cpp",permalink:"/docs/extensions/cpp"}},c={},p=[{value:"BSP version",id:"bsp-version",level:2},{value:"BSP Server remote interface",id:"bsp-server-remote-interface",level:2},{value:"CargoFeaturesState: request",id:"cargofeaturesstate-request",level:3},{value:"CargoFeaturesStateResult",id:"cargofeaturesstateresult",level:4},{value:"PackageFeatures",id:"packagefeatures",level:4},{value:"SetCargoFeatures: request",id:"setcargofeatures-request",level:3},{value:"SetCargoFeaturesParams",id:"setcargofeaturesparams",level:4},{value:"SetCargoFeaturesResult",id:"setcargofeaturesresult",level:4},{value:"BuildTargetData kinds",id:"buildtargetdata-kinds",level:2},{value:"CargoBuildTarget",id:"cargobuildtarget",level:3},{value:"CargoBuildTarget",id:"cargobuildtarget-1",level:4}],d={toc:p};function g(e){var t=e.components,a=(0,n.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The following section contains Cargo-specific extensions to the build server\nprotocol."),(0,s.kt)("h2",{id:"bsp-version"},"BSP version"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"2.2.0")),(0,s.kt)("h2",{id:"bsp-server-remote-interface"},"BSP Server remote interface"),(0,s.kt)("h3",{id:"cargofeaturesstate-request"},"CargoFeaturesState: request"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Unstable")," (may change in future versions)"),(0,s.kt)("p",null,"The cargo features state request is sent from the client to the server to\nquery for the current state of the Cargo features. Provides also mapping\nbetween Cargo packages and build target identifiers."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"method: ",(0,s.kt)("inlineCode",{parentName:"li"},"workspace/cargoFeaturesState")),(0,s.kt)("li",{parentName:"ul"},"result: ",(0,s.kt)("inlineCode",{parentName:"li"},"CargoFeaturesStateResult"))),(0,s.kt)("h4",{id:"cargofeaturesstateresult"},"CargoFeaturesStateResult"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Unstable")," (may change in future versions)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"export interface CargoFeaturesStateResult {\n  /** The list of Cargo packages with assigned to them target\n   * identifiers and available features. */\n  packagesFeatures: PackageFeatures[];\n}\n")),(0,s.kt)("h4",{id:"packagefeatures"},"PackageFeatures"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"export interface PackageFeatures {\n  /** The Cargo package identifier. */\n  packageId: string;\n\n  /** The list of build target identifiers assigned to the Cargo package. */\n  targets: BuildTargetIdentifier[];\n\n  /** The list of available features for the Cargo package. */\n  availableFeatures: Map<Feature, Set<Feature>>;\n\n  /** The list of enabled features for the Cargo package. */\n  enabledFeatures: Set<Feature>;\n}\n")),(0,s.kt)("h3",{id:"setcargofeatures-request"},"SetCargoFeatures: request"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Unstable")," (may change in future versions)"),(0,s.kt)("p",null,"The enable cargo features request is sent from the client to the server to\nset provided features collection as a new state for\nthe specified Cargo package."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"method: ",(0,s.kt)("inlineCode",{parentName:"li"},"workspace/setCargoFeatures")),(0,s.kt)("li",{parentName:"ul"},"params: ",(0,s.kt)("inlineCode",{parentName:"li"},"SetCargoFeaturesParams")),(0,s.kt)("li",{parentName:"ul"},"result: ",(0,s.kt)("inlineCode",{parentName:"li"},"SetCargoFeaturesResult"))),(0,s.kt)("h4",{id:"setcargofeaturesparams"},"SetCargoFeaturesParams"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Unstable")," (may change in future versions)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"export interface SetCargoFeaturesParams {\n  /** Package ID for which new features state will be set. */\n  packageId: string;\n\n  /** The list of features to be set as a new state. */\n  features: Set<Feature>;\n}\n")),(0,s.kt)("h4",{id:"setcargofeaturesresult"},"SetCargoFeaturesResult"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Unstable")," (may change in future versions)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"export interface SetCargoFeaturesResult {\n  /** The status code of the operation. */\n  statusCode: StatusCode;\n}\n")),(0,s.kt)("h2",{id:"buildtargetdata-kinds"},"BuildTargetData kinds"),(0,s.kt)("h3",{id:"cargobuildtarget"},"CargoBuildTarget"),(0,s.kt)("p",null,"This structure is embedded in\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"data?: BuildTargetData")," field, when\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"dataKind")," field contains ",(0,s.kt)("inlineCode",{parentName:"p"},'"cargo"'),"."),(0,s.kt)("h4",{id:"cargobuildtarget-1"},"CargoBuildTarget"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"CargoBuildTarget")," is a basic data structure that contains\ncargo-specific metadata."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"export interface CargoBuildTarget {\n  edition: RustEdition;\n\n  requiredFeatures: Set<Feature>;\n}\n")))}g.isMDXComponent=!0}}]);