"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[785],{2278:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>p,toc:()=>a});var i=n(3955),s=n(8379);const r={id:"cpp",title:"C++ Extension",sidebar_label:"cpp"},o=void 0,p={id:"extensions/cpp",title:"C++ Extension",description:"The following section contains C++-specific extensions to the build server",source:"@site/generated/extensions/cpp.md",sourceDirName:"extensions",slug:"/extensions/cpp",permalink:"/docs/extensions/cpp",draft:!1,unlisted:!1,editUrl:"https://github.com/build-server-protocol/build-server-protocol/edit/master/docs/extensions/cpp.md",tags:[],version:"current",frontMatter:{id:"cpp",title:"C++ Extension",sidebar_label:"cpp"},sidebar:"docs",previous:{title:"Cargo",permalink:"/docs/extensions/cargo"},next:{title:"Java",permalink:"/docs/extensions/java"}},l={},a=[{value:"BSP version",id:"bsp-version",level:2},{value:"BSP Server remote interface",id:"bsp-server-remote-interface",level:2},{value:"BuildTargetCppOptions: request",id:"buildtargetcppoptions-request",level:3},{value:"CppOptionsParams",id:"cppoptionsparams",level:4},{value:"CppOptionsResult",id:"cppoptionsresult",level:4},{value:"CppOptionsItem",id:"cppoptionsitem",level:4},{value:"BuildTargetData kinds",id:"buildtargetdata-kinds",level:2},{value:"CppBuildTarget",id:"cppbuildtarget",level:3},{value:"CppBuildTarget",id:"cppbuildtarget-1",level:4}];function c(e){const t={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"The following section contains C++-specific extensions to the build server\nprotocol."}),"\n",(0,i.jsx)(t.h2,{id:"bsp-version",children:"BSP version"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"2.2.0"})}),"\n",(0,i.jsx)(t.h2,{id:"bsp-server-remote-interface",children:"BSP Server remote interface"}),"\n",(0,i.jsx)(t.h3,{id:"buildtargetcppoptions-request",children:"BuildTargetCppOptions: request"}),"\n",(0,i.jsx)(t.p,{children:"The build target cpp options request is sent from the client to the server to\nquery for the list of compiler options necessary to compile in a given list of\ntargets."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["method: ",(0,i.jsx)(t.code,{children:"buildTarget/cppOptions"})]}),"\n",(0,i.jsxs)(t.li,{children:["params: ",(0,i.jsx)(t.code,{children:"CppOptionsParams"})]}),"\n",(0,i.jsxs)(t.li,{children:["result: ",(0,i.jsx)(t.code,{children:"CppOptionsResult"})]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"cppoptionsparams",children:"CppOptionsParams"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"export interface CppOptionsParams {\n  /** The targets for which the options are requested. */\n  targets: BuildTargetIdentifier[];\n}\n"})}),"\n",(0,i.jsx)(t.h4,{id:"cppoptionsresult",children:"CppOptionsResult"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"export interface CppOptionsResult {\n  /** The list of options for each target. */\n  items: CppOptionsItem[];\n}\n"})}),"\n",(0,i.jsx)(t.h4,{id:"cppoptionsitem",children:"CppOptionsItem"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"export interface CppOptionsItem {\n  /** The target identifier for which the options are requested. */\n  target: BuildTargetIdentifier;\n\n  /** Attributes added in the given order to COPTS\n   * before compiling the target.\n   * For example: -Iexternal/gtest/include */\n  copts: string[];\n\n  /** Attributes prepended with -D\n   * and added to the compile command line\n   * For example: BOOST_FALLTHROUGH */\n  defines: string[];\n\n  /** Attributes added to the linker command\n   * For example: -pthread */\n  linkopts: string[];\n\n  /** Create a shared library.\n   * The presence of this flag means that linking occurs with the -shared flag */\n  linkshared?: boolean;\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"buildtargetdata-kinds",children:"BuildTargetData kinds"}),"\n",(0,i.jsx)(t.h3,{id:"cppbuildtarget",children:"CppBuildTarget"}),"\n",(0,i.jsxs)(t.p,{children:["This structure is embedded in\nthe ",(0,i.jsx)(t.code,{children:"data?: BuildTargetData"})," field, when\nthe ",(0,i.jsx)(t.code,{children:"dataKind"})," field contains ",(0,i.jsx)(t.code,{children:'"cpp"'}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"cppbuildtarget-1",children:"CppBuildTarget"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"CppBuildTarget"})," is a basic data structure that contains c++-specific\nmetadata, specifically compiler reference."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"export interface CppBuildTarget {\n  /** The c++ version this target is supposed to use.\n   * For example: C++11 */\n  version?: string;\n\n  /** The type of compiler this target is supposed to use.\n   * For example: gcc */\n  compiler?: string;\n\n  /** Uri representating path to the c compiler.\n   * For example: file:///usr/bin/gcc */\n  cCompiler?: URI;\n\n  /** Uri representating path to the c++ compiler.\n   * For example: file:///usr/bin/g++ */\n  cppCompiler?: URI;\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8379:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>p});var i=n(2515);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function p(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);