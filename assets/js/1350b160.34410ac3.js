"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[236],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>g});var n=t(7294);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function r(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var o=n.createContext({}),c=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},p=function(e){var a=c(e.components);return n.createElement(o.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,s=e.mdxType,l=e.originalType,o=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=c(t),m=s,g=u["".concat(o,".").concat(m)]||u[m]||d[m]||l;return t?n.createElement(g,i(i({ref:a},p),{},{components:t})):n.createElement(g,i({ref:a},p))}));function g(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var l=t.length,i=new Array(l);i[0]=m;var r={};for(var o in a)hasOwnProperty.call(a,o)&&(r[o]=a[o]);r.originalType=e,r[u]="string"==typeof e?e:s,i[1]=r;for(var c=2;c<l;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5396:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>u});var n=t(7462),s=t(3366),l=(t(7294),t(3905)),i=["components"],r={id:"scala",title:"Scala Extension",sidebar_label:"Scala"},o=void 0,c={unversionedId:"extensions/scala",id:"extensions/scala",title:"Scala Extension",description:"The following section contains Scala-specific extensions to the build server",source:"@site/target/docs/extensions/scala.md",sourceDirName:"extensions",slug:"/extensions/scala",permalink:"/docs/extensions/scala",draft:!1,editUrl:"https://github.com/build-server-protocol/build-server-protocol/edit/master/docs/extensions/scala.md",tags:[],version:"current",frontMatter:{id:"scala",title:"Scala Extension",sidebar_label:"Scala"},sidebar:"docs",previous:{title:"sbt",permalink:"/docs/extensions/sbt"},next:{title:"Java",permalink:"/docs/bindings/java"}},p={},u=[{value:"Common shapes",id:"common-shapes",level:2},{value:"ScalaBuildTarget",id:"scalabuildtarget",level:4},{value:"ScalaPlatform",id:"scalaplatform",level:4},{value:"URI",id:"uri",level:4},{value:"JvmBuildTarget",id:"jvmbuildtarget",level:4},{value:"BSP Server remote interface",id:"bsp-server-remote-interface",level:2},{value:"ScalacOptions: request",id:"scalacoptions-request",level:3},{value:"ScalacOptionsParams",id:"scalacoptionsparams",level:4},{value:"BuildTargetIdentifier",id:"buildtargetidentifier",level:4},{value:"ScalacOptionsResult",id:"scalacoptionsresult",level:4},{value:"ScalacOptionsItem",id:"scalacoptionsitem",level:4},{value:"ScalaTestClasses: request",id:"scalatestclasses-request",level:3},{value:"ScalaTestClassesParams",id:"scalatestclassesparams",level:4},{value:"ScalaTestClassesResult",id:"scalatestclassesresult",level:4},{value:"ScalaTestClassesItem",id:"scalatestclassesitem",level:4},{value:"ScalaMainClasses: request",id:"scalamainclasses-request",level:3},{value:"ScalaMainClassesParams",id:"scalamainclassesparams",level:4},{value:"ScalaMainClassesResult",id:"scalamainclassesresult",level:4},{value:"ScalaMainClassesItem",id:"scalamainclassesitem",level:4},{value:"ScalaMainClass",id:"scalamainclass",level:4}],d={toc:u};function m(e){var a=e.components,t=(0,s.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The following section contains Scala-specific extensions to the build server\nprotocol."),(0,l.kt)("h2",{id:"common-shapes"},"Common shapes"),(0,l.kt)("h4",{id:"scalabuildtarget"},"ScalaBuildTarget"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ScalaBuildTarget")," is a basic data structure that contains scala-specific\nmetadata for compiling a target containing Scala sources. This metadata is\nembedded in the ",(0,l.kt)("inlineCode",{parentName:"p"},"data: Option[Json]")," field of the ",(0,l.kt)("inlineCode",{parentName:"p"},"BuildTarget")," definition, when\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"dataKind"),' field contains "scala".'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ScalaBuildTarget {\n  /** The Scala organization that is used for a target. */\n  scalaOrganization: String;\n\n  /** The scala version to compile this target */\n  scalaVersion: String;\n\n  /** The binary version of scalaVersion.\n   * For example, 2.12 if scalaVersion is 2.12.4. */\n  scalaBinaryVersion: String;\n\n  /** The target platform for this target */\n  platform: ScalaPlatform;\n\n  /** A sequence of Scala jars such as scala-library, scala-compiler and scala-reflect. */\n  jars: URI[];\n\n  /** The jvm build target describing jdk to be used */\n  jvmBuildTarget?: JvmBuildTarget;\n}\n")),(0,l.kt)("h4",{id:"scalaplatform"},"ScalaPlatform"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export enum ScalaPlatform {\n  Jvm = 1,\n\n  Js = 2,\n\n  Native = 3,\n}\n")),(0,l.kt)("h4",{id:"uri"},"URI"),(0,l.kt)("p",null,"A resource identifier that is a valid URI according to rfc3986:\n",(0,l.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc3986"},"https://tools.ietf.org/html/rfc3986")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export type URI = String;\n")),(0,l.kt)("h4",{id:"jvmbuildtarget"},"JvmBuildTarget"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"JvmBuildTarget")," is a basic data structure that contains jvm-specific\nmetadata, specifically JDK reference. This metadata is embedded in\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"data: Option[Json]")," field of the ",(0,l.kt)("inlineCode",{parentName:"p"},"BuildTarget")," definition, when\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"dataKind"),' field contains "jvm".'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface JvmBuildTarget {\n  /** Uri representing absolute path to jdk\n   * For example: file:///usr/lib/jvm/java-8-openjdk-amd64 */\n  javaHome?: URI;\n\n  /** The java version this target is supposed to use.\n   * For example: 1.8 */\n  javaVersion?: String;\n}\n")),(0,l.kt)("h2",{id:"bsp-server-remote-interface"},"BSP Server remote interface"),(0,l.kt)("h3",{id:"scalacoptions-request"},"ScalacOptions: request"),(0,l.kt)("p",null,"The build target scalac options request is sent from the client to the server to\nquery for the list of compiler options necessary to compile in a given list of\ntargets."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"method: ",(0,l.kt)("inlineCode",{parentName:"li"},"buildTarget/scalacOptions")),(0,l.kt)("li",{parentName:"ul"},"params: ",(0,l.kt)("inlineCode",{parentName:"li"},"ScalacOptionsParams")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("inlineCode",{parentName:"li"},"ScalacOptionsResult"))),(0,l.kt)("h4",{id:"scalacoptionsparams"},"ScalacOptionsParams"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ScalacOptionsParams {\n  targets: BuildTargetIdentifier[];\n}\n")),(0,l.kt)("h4",{id:"buildtargetidentifier"},"BuildTargetIdentifier"),(0,l.kt)("p",null,"A unique identifier for a target, can use any URI-compatible encoding as long as it is unique within the workspace.\nClients should not infer metadata out of the URI structure such as the path or query parameters, use ",(0,l.kt)("inlineCode",{parentName:"p"},"BuildTarget")," instead."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface BuildTargetIdentifier {\n  /** The target\u2019s Uri */\n  uri: URI;\n}\n")),(0,l.kt)("h4",{id:"scalacoptionsresult"},"ScalacOptionsResult"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ScalacOptionsResult {\n  items: ScalacOptionsItem[];\n}\n")),(0,l.kt)("h4",{id:"scalacoptionsitem"},"ScalacOptionsItem"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ScalacOptionsItem {\n  target: BuildTargetIdentifier;\n\n  options: String[];\n\n  /** The dependency classpath for this target, must be\n   * identical to what is passed as arguments to\n   * the -classpath flag in the command line interface\n   * of scalac. */\n  classpath: String[];\n\n  /** The output directory for classfiles produced by this target */\n  classDirectory: String;\n}\n")),(0,l.kt)("h3",{id:"scalatestclasses-request"},"ScalaTestClasses: request"),(0,l.kt)("p",null,"The Scala build target test classes request is sent from the client to the\nserver to query for the list of fully qualified names of test classes in a given\nlist of targets."),(0,l.kt)("p",null,"This method can for example be used by a client to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Show a list of the discovered classes that can be tested."),(0,l.kt)("li",{parentName:"ul"},'Attach a "Run test suite" button above the definition of a test suite via\n',(0,l.kt)("inlineCode",{parentName:"li"},"textDocument/codeLens"),".")),(0,l.kt)("p",null,"(To render the code lens, the language server needs to map the fully qualified\nnames of the test targets to the defining source file via\n",(0,l.kt)("inlineCode",{parentName:"p"},"textDocument/definition"),". Then, once users click on the button, the language\nserver can pass the fully qualified name of the test class as an argument to the\n",(0,l.kt)("inlineCode",{parentName:"p"},"buildTarget/test")," request.)"),(0,l.kt)("p",null,"This request may trigger a compilation on the selected build targets. The server\nis free to send any number of ",(0,l.kt)("inlineCode",{parentName:"p"},"build/task*"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"build/publishDiagnostics")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"build/logMessage")," notifications during compilation before completing the\nresponse."),(0,l.kt)("p",null,"The client will get a ",(0,l.kt)("inlineCode",{parentName:"p"},"originId")," field in ",(0,l.kt)("inlineCode",{parentName:"p"},"ScalaTestClassesResult")," if the\n",(0,l.kt)("inlineCode",{parentName:"p"},"originId")," field in the ",(0,l.kt)("inlineCode",{parentName:"p"},"ScalaTestClassesParams")," is defined."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"method: ",(0,l.kt)("inlineCode",{parentName:"li"},"buildTarget/scalaTestClasses")),(0,l.kt)("li",{parentName:"ul"},"params: ",(0,l.kt)("inlineCode",{parentName:"li"},"ScalaTestClassesParams")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("inlineCode",{parentName:"li"},"ScalaTestClassesResult"))),(0,l.kt)("h4",{id:"scalatestclassesparams"},"ScalaTestClassesParams"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ScalaTestClassesParams {\n  targets: BuildTargetIdentifier[];\n\n  /** An optional number uniquely identifying a client request. */\n  originId?: String;\n}\n")),(0,l.kt)("h4",{id:"scalatestclassesresult"},"ScalaTestClassesResult"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ScalaTestClassesResult {\n  items: ScalaTestClassesItem[];\n}\n")),(0,l.kt)("h4",{id:"scalatestclassesitem"},"ScalaTestClassesItem"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ScalaTestClassesItem {\n  /** The build target that contains the test classes. */\n  target: BuildTargetIdentifier;\n\n  /** Name of the the framework to which classes belong.\n   * It's optional in order to maintain compatibility, however it is expected\n   * from the newer implementations to not leave that field unspecified. */\n  framework?: String;\n\n  /** The fully qualified names of the test classes in this target */\n  classes: String[];\n}\n")),(0,l.kt)("h3",{id:"scalamainclasses-request"},"ScalaMainClasses: request"),(0,l.kt)("p",null,"The build target main classes request is sent from the client to the server to\nquery for the list of main classes that can be fed as arguments to\n",(0,l.kt)("inlineCode",{parentName:"p"},"buildTarget/run"),". This method can be used for the same use cases than the\n",(0,l.kt)("a",{parentName:"p",href:"#scala-test-classes-request"},"Scala Test Classes Request")," enables.\nThis request may trigger a compilation on the selected build targets. The server\nis free to send any number of ",(0,l.kt)("inlineCode",{parentName:"p"},"build/taskStart"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"build/taskProgress"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"build/taskFinish"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"build/publishDiagnostics")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"build/logMessage"),"\nnotifications during compilation before completing the response."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"method: ",(0,l.kt)("inlineCode",{parentName:"li"},"buildTarget/scalaMainClasses")),(0,l.kt)("li",{parentName:"ul"},"params: ",(0,l.kt)("inlineCode",{parentName:"li"},"ScalaMainClassesParams")),(0,l.kt)("li",{parentName:"ul"},"result: ",(0,l.kt)("inlineCode",{parentName:"li"},"ScalaMainClassesResult"))),(0,l.kt)("h4",{id:"scalamainclassesparams"},"ScalaMainClassesParams"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ScalaMainClassesParams {\n  targets: BuildTargetIdentifier[];\n\n  /** An optional number uniquely identifying a client request. */\n  originId?: String;\n}\n")),(0,l.kt)("h4",{id:"scalamainclassesresult"},"ScalaMainClassesResult"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ScalaMainClassesResult {\n  items: ScalaMainClassesItem[];\n\n  /** An optional id of the request that triggered this result. */\n  originId?: String;\n}\n")),(0,l.kt)("h4",{id:"scalamainclassesitem"},"ScalaMainClassesItem"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ScalaMainClassesItem {\n  /** The build target that contains the test classes. */\n  target: BuildTargetIdentifier;\n\n  /** The main class item. */\n  classes: ScalaMainClass[];\n}\n")),(0,l.kt)("h4",{id:"scalamainclass"},"ScalaMainClass"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ScalaMainClass {\n  /** The main class to run. */\n  className: String;\n\n  /** The user arguments to the main entrypoint. */\n  arguments: String[];\n\n  /** The jvm options for the application. */\n  jvmOptions: String[];\n\n  /** The environment variables for the application. */\n  environmentVariables?: String[];\n}\n")))}m.isMDXComponent=!0}}]);