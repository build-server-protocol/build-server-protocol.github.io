"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[577],{1023:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>o});var i=t(3955),s=t(8379);const a={id:"specification",title:"Build Server Protocol",sidebar_label:"Specification"},r=void 0,d={id:"specification",title:"Build Server Protocol",description:"This document is the specification of the Build Server Protocol (BSP).",source:"@site/generated/specification.md",sourceDirName:".",slug:"/specification",permalink:"/docs/specification",draft:!1,unlisted:!1,editUrl:"https://github.com/build-server-protocol/build-server-protocol/edit/master/docs/specification.md",tags:[],version:"current",frontMatter:{id:"specification",title:"Build Server Protocol",sidebar_label:"Specification"},sidebar:"docs",next:{title:"Frequently Asked Questions",permalink:"/docs/overview/faq"}},l={},o=[{value:"Motivation",id:"motivation",level:2},{value:"Background",id:"background",level:2},{value:"Relationship with LSP",id:"relationship-with-lsp",level:2},{value:"Status",id:"status",level:2},{value:"Base protocol",id:"base-protocol",level:2},{value:"Capabilities",id:"capabilities",level:3},{value:"Server lifetime",id:"server-lifetime",level:3},{value:"BSP version",id:"bsp-version",level:2},{value:"Common shapes",id:"common-shapes",level:2},{value:"Integer",id:"integer",level:4},{value:"Long",id:"long",level:4},{value:"BuildTarget",id:"buildtarget",level:4},{value:"BuildTargetIdentifier",id:"buildtargetidentifier",level:4},{value:"URI",id:"uri",level:4},{value:"BuildTargetTag",id:"buildtargettag",level:4},{value:"LanguageId",id:"languageid",level:4},{value:"BuildTargetCapabilities",id:"buildtargetcapabilities",level:4},{value:"BuildTargetDataKind",id:"buildtargetdatakind",level:4},{value:"BuildTargetData",id:"buildtargetdata",level:4},{value:"OriginId",id:"originid",level:4},{value:"TaskId",id:"taskid",level:4},{value:"Identifier",id:"identifier",level:4},{value:"StatusCode",id:"statuscode",level:4},{value:"EnvironmentVariables",id:"environmentvariables",level:4},{value:"BSP Server remote interface",id:"bsp-server-remote-interface",level:2},{value:"BuildInitialize: request",id:"buildinitialize-request",level:3},{value:"InitializeBuildParams",id:"initializebuildparams",level:4},{value:"BuildClientCapabilities",id:"buildclientcapabilities",level:4},{value:"InitializeBuildParamsDataKind",id:"initializebuildparamsdatakind",level:4},{value:"InitializeBuildParamsData",id:"initializebuildparamsdata",level:4},{value:"InitializeBuildResult",id:"initializebuildresult",level:4},{value:"BuildServerCapabilities",id:"buildservercapabilities",level:4},{value:"CompileProvider",id:"compileprovider",level:4},{value:"TestProvider",id:"testprovider",level:4},{value:"RunProvider",id:"runprovider",level:4},{value:"DebugProvider",id:"debugprovider",level:4},{value:"InitializeBuildResultDataKind",id:"initializebuildresultdatakind",level:4},{value:"InitializeBuildResultData",id:"initializebuildresultdata",level:4},{value:"OnBuildInitialized: notification",id:"onbuildinitialized-notification",level:3},{value:"BuildShutdown: request",id:"buildshutdown-request",level:3},{value:"OnBuildExit: notification",id:"onbuildexit-notification",level:3},{value:"WorkspaceBuildTargets: request",id:"workspacebuildtargets-request",level:3},{value:"WorkspaceBuildTargetsResult",id:"workspacebuildtargetsresult",level:4},{value:"WorkspaceReload: request",id:"workspacereload-request",level:3},{value:"BuildTargetSources: request",id:"buildtargetsources-request",level:3},{value:"SourcesParams",id:"sourcesparams",level:4},{value:"SourcesResult",id:"sourcesresult",level:4},{value:"SourcesItem",id:"sourcesitem",level:4},{value:"SourceItem",id:"sourceitem",level:4},{value:"SourceItemKind",id:"sourceitemkind",level:4},{value:"SourceItemDataKind",id:"sourceitemdatakind",level:4},{value:"SourceItemData",id:"sourceitemdata",level:4},{value:"BuildTargetInverseSources: request",id:"buildtargetinversesources-request",level:3},{value:"InverseSourcesParams",id:"inversesourcesparams",level:4},{value:"TextDocumentIdentifier",id:"textdocumentidentifier",level:4},{value:"InverseSourcesResult",id:"inversesourcesresult",level:4},{value:"BuildTargetDependencySources: request",id:"buildtargetdependencysources-request",level:3},{value:"DependencySourcesParams",id:"dependencysourcesparams",level:4},{value:"DependencySourcesResult",id:"dependencysourcesresult",level:4},{value:"DependencySourcesItem",id:"dependencysourcesitem",level:4},{value:"BuildTargetDependencyModules: request",id:"buildtargetdependencymodules-request",level:3},{value:"DependencyModulesParams",id:"dependencymodulesparams",level:4},{value:"DependencyModulesResult",id:"dependencymodulesresult",level:4},{value:"DependencyModulesItem",id:"dependencymodulesitem",level:4},{value:"DependencyModule",id:"dependencymodule",level:4},{value:"DependencyModuleDataKind",id:"dependencymoduledatakind",level:4},{value:"DependencyModuleData",id:"dependencymoduledata",level:4},{value:"BuildTargetResources: request",id:"buildtargetresources-request",level:3},{value:"ResourcesParams",id:"resourcesparams",level:4},{value:"ResourcesResult",id:"resourcesresult",level:4},{value:"ResourcesItem",id:"resourcesitem",level:4},{value:"BuildTargetOutputPaths: request",id:"buildtargetoutputpaths-request",level:3},{value:"OutputPathsParams",id:"outputpathsparams",level:4},{value:"OutputPathsResult",id:"outputpathsresult",level:4},{value:"OutputPathsItem",id:"outputpathsitem",level:4},{value:"OutputPathItem",id:"outputpathitem",level:4},{value:"OutputPathItemKind",id:"outputpathitemkind",level:4},{value:"BuildTargetCompile: request",id:"buildtargetcompile-request",level:3},{value:"CompileParams",id:"compileparams",level:4},{value:"CompileResult",id:"compileresult",level:4},{value:"CompileResultDataKind",id:"compileresultdatakind",level:4},{value:"CompileResultData",id:"compileresultdata",level:4},{value:"BuildTargetRun: request",id:"buildtargetrun-request",level:3},{value:"RunParams",id:"runparams",level:4},{value:"RunParamsDataKind",id:"runparamsdatakind",level:4},{value:"RunParamsData",id:"runparamsdata",level:4},{value:"RunResult",id:"runresult",level:4},{value:"BuildTargetTest: request",id:"buildtargettest-request",level:3},{value:"TestParams",id:"testparams",level:4},{value:"TestParamsDataKind",id:"testparamsdatakind",level:4},{value:"TestParamsData",id:"testparamsdata",level:4},{value:"TestResult",id:"testresult",level:4},{value:"TestResultDataKind",id:"testresultdatakind",level:4},{value:"TestResultData",id:"testresultdata",level:4},{value:"DebugSessionStart: request",id:"debugsessionstart-request",level:3},{value:"DebugSessionParams",id:"debugsessionparams",level:4},{value:"DebugSessionParamsDataKind",id:"debugsessionparamsdatakind",level:4},{value:"DebugSessionParamsData",id:"debugsessionparamsdata",level:4},{value:"DebugSessionAddress",id:"debugsessionaddress",level:4},{value:"BuildTargetCleanCache: request",id:"buildtargetcleancache-request",level:3},{value:"CleanCacheParams",id:"cleancacheparams",level:4},{value:"CleanCacheResult",id:"cleancacheresult",level:4},{value:"OnRunReadStdin: notification",id:"onrunreadstdin-notification",level:3},{value:"ReadParams",id:"readparams",level:4},{value:"BSP Client remote interface",id:"bsp-client-remote-interface",level:2},{value:"OnBuildShowMessage: notification",id:"onbuildshowmessage-notification",level:3},{value:"ShowMessageParams",id:"showmessageparams",level:4},{value:"MessageType",id:"messagetype",level:4},{value:"OnBuildLogMessage: notification",id:"onbuildlogmessage-notification",level:3},{value:"LogMessageParams",id:"logmessageparams",level:4},{value:"OnBuildPublishDiagnostics: notification",id:"onbuildpublishdiagnostics-notification",level:3},{value:"PublishDiagnosticsParams",id:"publishdiagnosticsparams",level:4},{value:"Diagnostic",id:"diagnostic",level:4},{value:"Range",id:"range",level:4},{value:"Position",id:"position",level:4},{value:"DiagnosticSeverity",id:"diagnosticseverity",level:4},{value:"CodeDescription",id:"codedescription",level:4},{value:"DiagnosticTag",id:"diagnostictag",level:4},{value:"DiagnosticRelatedInformation",id:"diagnosticrelatedinformation",level:4},{value:"Location",id:"location",level:4},{value:"DiagnosticDataKind",id:"diagnosticdatakind",level:4},{value:"DiagnosticData",id:"diagnosticdata",level:4},{value:"OnBuildTargetDidChange: notification",id:"onbuildtargetdidchange-notification",level:3},{value:"DidChangeBuildTarget",id:"didchangebuildtarget",level:4},{value:"BuildTargetEvent",id:"buildtargetevent",level:4},{value:"BuildTargetEventKind",id:"buildtargeteventkind",level:4},{value:"BuildTargetEventDataKind",id:"buildtargeteventdatakind",level:4},{value:"BuildTargetEventData",id:"buildtargeteventdata",level:4},{value:"OnBuildTaskStart: notification",id:"onbuildtaskstart-notification",level:3},{value:"TaskStartParams",id:"taskstartparams",level:4},{value:"TaskStartDataKind",id:"taskstartdatakind",level:4},{value:"TaskStartData",id:"taskstartdata",level:4},{value:"OnBuildTaskProgress: notification",id:"onbuildtaskprogress-notification",level:3},{value:"TaskProgressParams",id:"taskprogressparams",level:4},{value:"TaskProgressDataKind",id:"taskprogressdatakind",level:4},{value:"TaskProgressData",id:"taskprogressdata",level:4},{value:"OnBuildTaskFinish: notification",id:"onbuildtaskfinish-notification",level:3},{value:"TaskFinishParams",id:"taskfinishparams",level:4},{value:"TaskFinishDataKind",id:"taskfinishdatakind",level:4},{value:"TaskFinishData",id:"taskfinishdata",level:4},{value:"OnRunPrintStdout: notification",id:"onrunprintstdout-notification",level:3},{value:"PrintParams",id:"printparams",level:4},{value:"OnRunPrintStderr: notification",id:"onrunprintstderr-notification",level:3},{value:"TaskFinishData kinds",id:"taskfinishdata-kinds",level:2},{value:"CompileReport",id:"compilereport",level:3},{value:"CompileReport",id:"compilereport-1",level:4},{value:"TestFinish",id:"testfinish",level:3},{value:"TestFinish",id:"testfinish-1",level:4},{value:"TestStatus",id:"teststatus",level:4},{value:"TestFinishDataKind",id:"testfinishdatakind",level:4},{value:"TestFinishData",id:"testfinishdata",level:4},{value:"TestReport",id:"testreport",level:3},{value:"TestReport",id:"testreport-1",level:4},{value:"TaskStartData kinds",id:"taskstartdata-kinds",level:2},{value:"CompileTask",id:"compiletask",level:3},{value:"CompileTask",id:"compiletask-1",level:4},{value:"TestStart",id:"teststart",level:3},{value:"TestStart",id:"teststart-1",level:4},{value:"TestTask",id:"testtask",level:3},{value:"TestTask",id:"testtask-1",level:4}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This document is the specification of the Build Server Protocol (BSP)."}),"\n",(0,i.jsx)(n.p,{children:'Edits to this specification can be made via a pull request against this markdown\ndocument, see "edit" button at the bottom of this page on the website.'}),"\n",(0,i.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsx)(n.p,{children:"The goal of BSP is to reduce the effort required by tooling developers to\nintegrate between available IDEs and build tools. Currently, every IDE must\nimplement a custom integration for each supported build tool in order to extract\ninformation such as source directory layouts or compiler options. Likewise, new\nbuild tools are expected to integrate with all available IDEs. The growing\nnumber of IDEs and build tools in the wider programming community means tooling\ndevelopers spend a lot of time working on these integrations."}),"\n",(0,i.jsx)(n.p,{children:"The Build Server Protocol defines common functionality that both build tools\n(servers) and IDEs (clients) understand. This common functionality enables\ntooling developers to provide their end users the best developer experience\nwhile supporting build tools and language servers with less effort and time."}),"\n",(0,i.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,i.jsx)(n.p,{children:"The Build Server Protocol takes inspiration from the Language Server Protocol\n(LSP). Unlike in the Language Server Protocol, the language server or IDE is\nreferred to as the \u201cclient\u201d and a build tool such as sbt/Gradle/Bazel is\nreferred to as the \u201cserver\u201d."}),"\n",(0,i.jsx)(n.p,{children:"The best way to read this document is by considering it as a wishlist from the\nperspective of an IDE developer."}),"\n",(0,i.jsx)(n.p,{children:"The code listings in this document are written using TypeScript syntax. Every\ndata strucuture in this document has a direct translation to JSON and Protobuf."}),"\n",(0,i.jsx)(n.h2,{id:"relationship-with-lsp",children:"Relationship with LSP"}),"\n",(0,i.jsx)(n.p,{children:"BSP can be used together with LSP in the same architecture. The diagram below\nillustrates an example how an LSP server can also act as a BSP client."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://i.imgur.com/q4KEas9.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"BSP can also be used without LSP. In the example above, IntelliJ acts as a BSP\nclient even if IntelliJ does not use LSP."}),"\n",(0,i.jsx)(n.h2,{id:"status",children:"Status"}),"\n",(0,i.jsx)(n.p,{children:"The Build Server Protocol is not an approved standard. Everything in this\ndocument is subject to change and open for discussions, including core data\nstructures."}),"\n",(0,i.jsx)(n.p,{children:"The creation of BSP clients and servers is under active development."}),"\n",(0,i.jsxs)(n.p,{children:["In the clients space, IntelliJ has been the first language server to implement\nBSP. The integration is available in the nightly releases of the Scala plugin.\nOther language servers, like ",(0,i.jsx)(n.a,{href:"https://github.com/lampepfl/dotty",children:"Dotty IDE"})," and\n",(0,i.jsx)(n.a,{href:"https://github.com/scalameta/metals",children:"scalameta/metals"}),", are currently working\nor planning to work on a BSP integrations."]}),"\n",(0,i.jsx)(n.p,{children:"On the server side,"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/scalacenter/bloop",children:"Bloop"})," was the first\nserver to implement BSP"]}),"\n",(0,i.jsxs)(n.li,{children:["sbt added built-in support in ",(0,i.jsx)(n.a,{href:"https://github.com/sbt/sbt/pull/5538",children:"1.4.0"}),","]}),"\n",(0,i.jsxs)(n.li,{children:["Mill ships with ",(0,i.jsx)(n.a,{href:"https://mill-build.com/mill/Installation_IDE_Support.html#_build_server_protocol_bsp",children:"built-in BSP support"})]}),"\n",(0,i.jsxs)(n.li,{children:["Bazel support is provided by ",(0,i.jsx)(n.a,{href:"https://github.com/JetBrains/bazel-bsp",children:"bazel-bsp"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"We're looking for third parties that implement BSP natively in other build tools\nsuch as Gradle."}),"\n",(0,i.jsx)(n.p,{children:"The Build Server Protocol has been designed to be language-agnostic. We're\nlooking for ways to collaborate with other programming language communities and\nbuild tool authors."}),"\n",(0,i.jsx)(n.p,{children:"The best way to share your thoughts on the Build Server Protocol or to get\ninvolved in its development is to open an issue or pull request to this\nrepository. Any help on developing integrations will be much appreciated."}),"\n",(0,i.jsx)(n.h2,{id:"base-protocol",children:"Base protocol"}),"\n",(0,i.jsxs)(n.p,{children:["The base protocol is identical to the language server base protocol. See\n",(0,i.jsx)(n.a,{href:"https://microsoft.github.io/language-server-protocol/specification",children:"https://microsoft.github.io/language-server-protocol/specification"}),"\nfor more details."]}),"\n",(0,i.jsx)(n.p,{children:"Like the language server protocol, the build server protocol defines a set of\nJSON-RPC request, response and notification messages which are exchanged using\nthe base protocol."}),"\n",(0,i.jsx)(n.h3,{id:"capabilities",children:"Capabilities"}),"\n",(0,i.jsx)(n.p,{children:"Unlike the language server protocol, the build server protocol does not support\ndynamic registration of capabilities. The motivation for this change is\nsimplicity. If a motivating example for dynamic registration comes up this\ndecision can be reconsidered. The server and client capabilities must be\ncommunicated through the initialize request."}),"\n",(0,i.jsx)(n.h3,{id:"server-lifetime",children:"Server lifetime"}),"\n",(0,i.jsx)(n.p,{children:"Like the language server protocol, the current protocol specification defines\nthat the lifetime of a build server is managed by the client (e.g. a language\nserver like Dotty IDE). It is up to the client to decide when to start\n(process-wise) and when to shutdown a server."}),"\n",(0,i.jsx)(n.h2,{id:"bsp-version",children:"BSP version"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"2.2.0"})}),"\n",(0,i.jsx)(n.h2,{id:"common-shapes",children:"Common shapes"}),"\n",(0,i.jsx)(n.h4,{id:"integer",children:"Integer"}),"\n",(0,i.jsx)(n.p,{children:"An integer is a 32-bit signed integer ranging from -2^31 to (2^31)-1 (inclusive)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type Integer = number;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"long",children:"Long"}),"\n",(0,i.jsx)(n.p,{children:"A long is a 64-bit signed integer ranging from -2^63 to (2^63)-1 (inclusive)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type Long = number;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"buildtarget",children:"BuildTarget"}),"\n",(0,i.jsx)(n.p,{children:"Build target contains metadata about an artifact (for example library, test, or binary artifact). Using vocabulary of other build tools:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"sbt: a build target is a combined project + config. Example:"}),"\n",(0,i.jsx)(n.li,{children:"a regular JVM project with main and test configurations will have 2 build targets, one for main and one for test."}),"\n",(0,i.jsx)(n.li,{children:"a single configuration in a single project that contains both Java and Scala sources maps to one BuildTarget."}),"\n",(0,i.jsx)(n.li,{children:"a project with crossScalaVersions 2.11 and 2.12 containing main and test configuration in each will have 4 build targets."}),"\n",(0,i.jsx)(n.li,{children:"a Scala 2.11 and 2.12 cross-built project for Scala.js and the JVM with main and test configurations will have 8 build targets."}),"\n",(0,i.jsx)(n.li,{children:"Pants: a pants target corresponds one-to-one with a BuildTarget"}),"\n",(0,i.jsx)(n.li,{children:"Bazel: a bazel target corresponds one-to-one with a BuildTarget"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The general idea is that the BuildTarget data structure should contain only information that is fast or cheap to compute."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface BuildTarget {\n  /** The target's unique identifier */\n  id: BuildTargetIdentifier;\n\n  /** A human readable name for this target.\n   * May be presented in the user interface.\n   * Should be unique if possible.\n   * The id.uri is used if None. */\n  displayName?: string;\n\n  /** The directory where this target belongs to. Multiple build targets are allowed to map\n   * to the same base directory, and a build target is not required to have a base directory.\n   * A base directory does not determine the sources of a target, see buildTarget/sources. */\n  baseDirectory?: URI;\n\n  /** Free-form string tags to categorize or label this build target.\n   * For example, can be used by the client to:\n   * - customize how the target should be translated into the client's project model.\n   * - group together different but related targets in the user interface.\n   * - display icons or colors in the user interface.\n   * Pre-defined tags are listed in `BuildTargetTag` but clients and servers\n   * are free to define new tags for custom purposes. */\n  tags: BuildTargetTag[];\n\n  /** The set of languages that this target contains.\n   * The ID string for each language is defined in the LSP. */\n  languageIds: LanguageId[];\n\n  /** The direct upstream build target dependencies of this build target */\n  dependencies: BuildTargetIdentifier[];\n\n  /** The capabilities of this build target. */\n  capabilities: BuildTargetCapabilities;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: BuildTargetDataKind;\n\n  /** Language-specific metadata about this target.\n   * See ScalaBuildTarget as an example. */\n  data?: BuildTargetData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"buildtargetidentifier",children:"BuildTargetIdentifier"}),"\n",(0,i.jsxs)(n.p,{children:["A unique identifier for a target, can use any URI-compatible encoding as long as it is unique within the workspace.\nClients should not infer metadata out of the URI structure such as the path or query parameters, use ",(0,i.jsx)(n.code,{children:"BuildTarget"})," instead."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface BuildTargetIdentifier {\n  /** The target's Uri */\n  uri: URI;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"uri",children:"URI"}),"\n",(0,i.jsxs)(n.p,{children:["A resource identifier that is a valid URI according to rfc3986:\n",(0,i.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc3986",children:"https://tools.ietf.org/html/rfc3986"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type URI = string;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"buildtargettag",children:"BuildTargetTag"}),"\n",(0,i.jsx)(n.p,{children:"A list of predefined tags that can be used to categorize build targets."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export type BuildTargetTag = string;\n\nexport namespace BuildTargetTag {\n  /** Target contains source code for producing any kind of application, may have\n   * but does not require the `canRun` capability. */\n  export const Application = "application";\n\n  /** Target contains source code to measure performance of a program, may have\n   * but does not require the `canRun` build target capability. */\n  export const Benchmark = "benchmark";\n\n  /** Target contains source code for integration testing purposes, may have\n   * but does not require the `canTest` capability.\n   * The difference between "test" and "integration-test" is that\n   * integration tests traditionally run slower compared to normal tests\n   * and require more computing resources to execute. */\n  export const IntegrationTest = "integration-test";\n\n  /** Target contains re-usable functionality for downstream targets. May have any\n   * combination of capabilities. */\n  export const Library = "library";\n\n  /** Actions on the target such as build and test should only be invoked manually\n   * and explicitly. For example, triggering a build on all targets in the workspace\n   * should by default not include this target.\n   * The original motivation to add the "manual" tag comes from a similar functionality\n   * that exists in Bazel, where targets with this tag have to be specified explicitly\n   * on the command line. */\n  export const Manual = "manual";\n\n  /** Target should be ignored by IDEs. */\n  export const NoIde = "no-ide";\n\n  /** Target contains source code for testing purposes, may have but does not\n   * require the `canTest` capability. */\n  export const Test = "test";\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"languageid",children:"LanguageId"}),"\n",(0,i.jsxs)(n.p,{children:["Language IDs are defined here\n",(0,i.jsx)(n.a,{href:"https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentItem",children:"https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentItem"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type LanguageId = string;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"buildtargetcapabilities",children:"BuildTargetCapabilities"}),"\n",(0,i.jsx)(n.p,{children:"Clients can use these capabilities to notify users what BSP endpoints can and\ncannot be used and why."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface BuildTargetCapabilities {\n  /** This target can be compiled by the BSP server. */\n  canCompile?: boolean;\n\n  /** This target can be tested by the BSP server. */\n  canTest?: boolean;\n\n  /** This target can be run by the BSP server. */\n  canRun?: boolean;\n\n  /** This target can be debugged by the BSP server. */\n  canDebug?: boolean;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"buildtargetdatakind",children:"BuildTargetDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export type BuildTargetDataKind = string;\n\nexport namespace BuildTargetDataKind {\n  /** `data` field must contain a CargoBuildTarget object. */\n  export const Cargo = "cargo";\n\n  /** `data` field must contain a CppBuildTarget object. */\n  export const Cpp = "cpp";\n\n  /** `data` field must contain a JvmBuildTarget object. */\n  export const Jvm = "jvm";\n\n  /** `data` field must contain a PythonBuildTarget object. */\n  export const Python = "python";\n\n  /** `data` field must contain a SbtBuildTarget object. */\n  export const Sbt = "sbt";\n\n  /** `data` field must contain a ScalaBuildTarget object. */\n  export const Scala = "scala";\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"buildtargetdata",children:"BuildTargetData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type BuildTargetData = any;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"originid",children:"OriginId"}),"\n",(0,i.jsx)(n.p,{children:"Represents the identifier of a BSP request."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type OriginId = string;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"taskid",children:"TaskId"}),"\n",(0,i.jsxs)(n.p,{children:["The Task Id allows clients to ",(0,i.jsx)(n.em,{children:"uniquely"})," identify a BSP task and establish a client-parent relationship with another task id."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface TaskId {\n  /** A unique identifier */\n  id: Identifier;\n\n  /** The parent task ids, if any. A non-empty parents field means\n   * this task is a sub-task of every parent task id. The child-parent\n   * relationship of tasks makes it possible to render tasks in\n   * a tree-like user interface or inspect what caused a certain task\n   * execution.\n   * OriginId should not be included in the parents field, there is a separate\n   * field for that. */\n  parents?: Identifier[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"identifier",children:"Identifier"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type Identifier = string;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"statuscode",children:"StatusCode"}),"\n",(0,i.jsx)(n.p,{children:"Included in notifications of tasks or requests to signal the completion state."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export enum StatusCode {\n  /** Execution was successful. */\n  Ok = 1,\n\n  /** Execution failed. */\n  Error = 2,\n\n  /** Execution was cancelled. */\n  Cancelled = 3,\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"environmentvariables",children:"EnvironmentVariables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type EnvironmentVariables = Map<string, string>;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"bsp-server-remote-interface",children:"BSP Server remote interface"}),"\n",(0,i.jsx)(n.h3,{id:"buildinitialize-request",children:"BuildInitialize: request"}),"\n",(0,i.jsx)(n.p,{children:"Like the language server protocol, the initialize request is sent as the first request from the client to the server.\nIf the server receives a request or notification before the initialize request it should act as follows:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"For a request the response should be an error with code: -32002. The message can be picked by the server."}),"\n",(0,i.jsx)(n.li,{children:"Notifications should be dropped, except for the exit notification. This will allow the exit of a server without an initialize request."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Until the server has responded to the initialize request with an InitializeBuildResult, the client must not send any additional\nrequests or notifications to the server."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"build/initialize"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"InitializeBuildParams"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"InitializeBuildResult"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"initializebuildparams",children:"InitializeBuildParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface InitializeBuildParams {\n  /** Name of the client */\n  displayName: string;\n\n  /** The version of the client */\n  version: string;\n\n  /** The BSP version that the client speaks */\n  bspVersion: string;\n\n  /** The rootUri of the workspace */\n  rootUri: URI;\n\n  /** The capabilities of the client */\n  capabilities: BuildClientCapabilities;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: InitializeBuildParamsDataKind;\n\n  /** Additional metadata about the client */\n  data?: InitializeBuildParamsData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"buildclientcapabilities",children:"BuildClientCapabilities"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface BuildClientCapabilities {\n  /** The languages that this client supports.\n   * The ID strings for each language is defined in the LSP.\n   * The server must never respond with build targets for other\n   * languages than those that appear in this list. */\n  languageIds: LanguageId[];\n\n  /** Mirror capability to BuildServerCapabilities.jvmCompileClasspathProvider\n   * The client will request classpath via `buildTarget/jvmCompileClasspath` so\n   * it's safe to return classpath in ScalacOptionsItem empty. */\n  jvmCompileClasspathReceiver?: boolean;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"initializebuildparamsdatakind",children:"InitializeBuildParamsDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type InitializeBuildParamsDataKind = string;\n\nexport namespace InitializeBuildParamsDataKind {}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"initializebuildparamsdata",children:"InitializeBuildParamsData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type InitializeBuildParamsData = any;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"initializebuildresult",children:"InitializeBuildResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface InitializeBuildResult {\n  /** Name of the server */\n  displayName: string;\n\n  /** The version of the server */\n  version: string;\n\n  /** The BSP version that the server speaks */\n  bspVersion: string;\n\n  /** The capabilities of the build server */\n  capabilities: BuildServerCapabilities;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: InitializeBuildResultDataKind;\n\n  /** Additional metadata about the server */\n  data?: InitializeBuildResultData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"buildservercapabilities",children:"BuildServerCapabilities"}),"\n",(0,i.jsx)(n.p,{children:"The capabilities of the build server.\nClients can use these capabilities to notify users what BSP endpoints can and\ncannot be used and why."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface BuildServerCapabilities {\n  /** The languages the server supports compilation via method buildTarget/compile. */\n  compileProvider?: CompileProvider;\n\n  /** The languages the server supports test execution via method buildTarget/test. */\n  testProvider?: TestProvider;\n\n  /** The languages the server supports run via method buildTarget/run. */\n  runProvider?: RunProvider;\n\n  /** The languages the server supports debugging via method debugSession/start. */\n  debugProvider?: DebugProvider;\n\n  /** The server can provide a list of targets that contain a\n   * single text document via the method buildTarget/inverseSources */\n  inverseSourcesProvider?: boolean;\n\n  /** The server provides sources for library dependencies\n   * via method buildTarget/dependencySources */\n  dependencySourcesProvider?: boolean;\n\n  /** The server can provide a list of dependency modules (libraries with meta information)\n   * via method buildTarget/dependencyModules */\n  dependencyModulesProvider?: boolean;\n\n  /** The server provides all the resource dependencies\n   * via method buildTarget/resources */\n  resourcesProvider?: boolean;\n\n  /** The server provides all output paths\n   * via method buildTarget/outputPaths */\n  outputPathsProvider?: boolean;\n\n  /** The server sends notifications to the client on build\n   * target change events via buildTarget/didChange */\n  buildTargetChangedProvider?: boolean;\n\n  /** The server can respond to `buildTarget/jvmRunEnvironment` requests with the\n   * necessary information required to launch a Java process to run a main class. */\n  jvmRunEnvironmentProvider?: boolean;\n\n  /** The server can respond to `buildTarget/jvmTestEnvironment` requests with the\n   * necessary information required to launch a Java process for testing or\n   * debugging. */\n  jvmTestEnvironmentProvider?: boolean;\n\n  /** The server can respond to `workspace/cargoFeaturesState` and\n   * `setCargoFeatures` requests. In other words, supports Cargo Features extension. */\n  cargoFeaturesProvider?: boolean;\n\n  /** Reloading the build state through workspace/reload is supported */\n  canReload?: boolean;\n\n  /** The server can respond to `buildTarget/jvmCompileClasspath` requests with the\n   * necessary information about the target's classpath. */\n  jvmCompileClasspathProvider?: boolean;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"compileprovider",children:"CompileProvider"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface CompileProvider {\n  languageIds: LanguageId[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"testprovider",children:"TestProvider"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface TestProvider {\n  languageIds: LanguageId[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"runprovider",children:"RunProvider"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface RunProvider {\n  languageIds: LanguageId[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"debugprovider",children:"DebugProvider"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface DebugProvider {\n  languageIds: LanguageId[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"initializebuildresultdatakind",children:"InitializeBuildResultDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type InitializeBuildResultDataKind = string;\n\nexport namespace InitializeBuildResultDataKind {}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"initializebuildresultdata",children:"InitializeBuildResultData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type InitializeBuildResultData = any;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onbuildinitialized-notification",children:"OnBuildInitialized: notification"}),"\n",(0,i.jsx)(n.p,{children:"Like the language server protocol, the initialized notification is sent from the\nclient to the server after the client received the result of the initialize\nrequest but before the client is sending any other request or notification to\nthe server. The server can use the initialized notification for example to\ninitialize intensive computation such as dependency resolution or compilation.\nThe initialized notification may only be sent once."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"build/initialized"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"buildshutdown-request",children:"BuildShutdown: request"}),"\n",(0,i.jsx)(n.p,{children:"Like the language server protocol, the shutdown build request is sent from the\nclient to the server. It asks the server to shut down, but to not exit\n(otherwise the response might not be delivered correctly to the client). There\nis a separate exit notification that asks the server to exit."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"build/shutdown"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"onbuildexit-notification",children:"OnBuildExit: notification"}),"\n",(0,i.jsx)(n.p,{children:"Like the language server protocol, a notification to ask the server to exit its process. The server should exit with success code 0\nif the shutdown request has been received before; otherwise with error code 1."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"build/exit"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"workspacebuildtargets-request",children:"WorkspaceBuildTargets: request"}),"\n",(0,i.jsx)(n.p,{children:"The workspace build targets request is sent from the client to the server to ask\nfor the list of all available build targets in the workspace."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"workspace/buildTargets"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"WorkspaceBuildTargetsResult"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"workspacebuildtargetsresult",children:"WorkspaceBuildTargetsResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface WorkspaceBuildTargetsResult {\n  /** The build targets in this workspace that\n   * contain sources with the given language ids. */\n  targets: BuildTarget[];\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"workspacereload-request",children:"WorkspaceReload: request"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"reload"})," request is sent from the client to instruct the build server to reload\nthe build configuration. This request should be supported by build tools that keep\ntheir state in memory. If the ",(0,i.jsx)(n.code,{children:"reload"}),' request returns with an error, it\'s expected\nthat other requests respond with the previously known "good" state.']}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"workspace/reload"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"buildtargetsources-request",children:"BuildTargetSources: request"}),"\n",(0,i.jsxs)(n.p,{children:["The build target sources request is sent from the client to the server to query\nfor the list of text documents and directories that are belong to a build\ntarget. The sources response must not include sources that are external to the\nworkspace, see ",(0,i.jsx)(n.code,{children:"buildTarget/dependencySources"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"buildTarget/sources"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"SourcesParams"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"SourcesResult"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"sourcesparams",children:"SourcesParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface SourcesParams {\n  targets: BuildTargetIdentifier[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sourcesresult",children:"SourcesResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface SourcesResult {\n  items: SourcesItem[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sourcesitem",children:"SourcesItem"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export interface SourcesItem {\n  target: BuildTargetIdentifier;\n\n  /** The text documents or and directories that belong to this build target. */\n  sources: SourceItem[];\n\n  /** The root directories from where source files should be relativized.\n   * Example: ["file://Users/name/dev/metals/src/main/scala"] */\n  roots?: URI[];\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"sourceitem",children:"SourceItem"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export interface SourceItem {\n  /** Either a text document or a directory. A directory entry must end with a forward\n   * slash "/" and a directory entry implies that every nested text document within the\n   * directory belongs to this source item. */\n  uri: URI;\n\n  /** Type of file of the source item, such as whether it is file or directory. */\n  kind: SourceItemKind;\n\n  /** Indicates if this source is automatically generated by the build and is not\n   * intended to be manually edited by the user. */\n  generated: boolean;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: SourceItemDataKind;\n\n  /** Language-specific metadata about this source item. */\n  data?: SourceItemData;\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"sourceitemkind",children:"SourceItemKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export enum SourceItemKind {\n  /** The source item references a normal file. */\n  File = 1,\n\n  /** The source item references a directory. */\n  Directory = 2,\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sourceitemdatakind",children:"SourceItemDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export type SourceItemDataKind = string;\n\nexport namespace SourceItemDataKind {\n  /** `data` field must contain a JvmSourceItemData object. */\n  export const Jvm = "jvm";\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"sourceitemdata",children:"SourceItemData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type SourceItemData = any;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"buildtargetinversesources-request",children:"BuildTargetInverseSources: request"}),"\n",(0,i.jsxs)(n.p,{children:["The inverse sources request is sent from the client to the server to query for\nthe list of build targets containing a text document. The server communicates\nduring the initialize handshake whether this method is supported or not. This\nrequest can be viewed as the inverse of ",(0,i.jsx)(n.code,{children:"buildTarget/sources"}),", except it only\nworks for text documents and not directories."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"buildTarget/inverseSources"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"InverseSourcesParams"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"InverseSourcesResult"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"inversesourcesparams",children:"InverseSourcesParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface InverseSourcesParams {\n  textDocument: TextDocumentIdentifier;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"textdocumentidentifier",children:"TextDocumentIdentifier"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface TextDocumentIdentifier {\n  /** The text document's URI. */\n  uri: URI;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"inversesourcesresult",children:"InverseSourcesResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface InverseSourcesResult {\n  targets: BuildTargetIdentifier[];\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"buildtargetdependencysources-request",children:"BuildTargetDependencySources: request"}),"\n",(0,i.jsxs)(n.p,{children:["The build target dependency sources request is sent from the client to the\nserver to query for the sources of build target dependencies that are external\nto the workspace. The dependency sources response must not include source files\nthat belong to a build target within the workspace, see ",(0,i.jsx)(n.code,{children:"buildTarget/sources"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The server communicates during the initialize handshake whether this method is\nsupported or not. This method can for example be used by a language server on\n",(0,i.jsx)(n.code,{children:"textDocument/definition"}),' to "Go to definition" from project sources to\ndependency sources.']}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"buildTarget/dependencySources"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"DependencySourcesParams"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"DependencySourcesResult"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"dependencysourcesparams",children:"DependencySourcesParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface DependencySourcesParams {\n  targets: BuildTargetIdentifier[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"dependencysourcesresult",children:"DependencySourcesResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface DependencySourcesResult {\n  items: DependencySourcesItem[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"dependencysourcesitem",children:"DependencySourcesItem"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface DependencySourcesItem {\n  target: BuildTargetIdentifier;\n\n  /** List of resources containing source files of the\n   * target's dependencies.\n   * Can be source files, jar files, zip files, or directories. */\n  sources: URI[];\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"buildtargetdependencymodules-request",children:"BuildTargetDependencyModules: request"}),"\n",(0,i.jsxs)(n.p,{children:["The build target dependency modules request is sent from the client to the\nserver to query for the libraries of build target dependencies that are external\nto the workspace including meta information about library and their sources.\nIt's an extended version of ",(0,i.jsx)(n.code,{children:"buildTarget/sources"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"buildTarget/dependencyModules"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"DependencyModulesParams"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"DependencyModulesResult"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"dependencymodulesparams",children:"DependencyModulesParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface DependencyModulesParams {\n  targets: BuildTargetIdentifier[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"dependencymodulesresult",children:"DependencyModulesResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface DependencyModulesResult {\n  items: DependencyModulesItem[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"dependencymodulesitem",children:"DependencyModulesItem"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface DependencyModulesItem {\n  target: BuildTargetIdentifier;\n\n  modules: DependencyModule[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"dependencymodule",children:"DependencyModule"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface DependencyModule {\n  /** Module name */\n  name: string;\n\n  /** Module version */\n  version: string;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: DependencyModuleDataKind;\n\n  /** Language-specific metadata about this module.\n   * See MavenDependencyModule as an example. */\n  data?: DependencyModuleData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"dependencymoduledatakind",children:"DependencyModuleDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export type DependencyModuleDataKind = string;\n\nexport namespace DependencyModuleDataKind {\n  /** `data` field must contain a MavenDependencyModule object. */\n  export const Maven = "maven";\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"dependencymoduledata",children:"DependencyModuleData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type DependencyModuleData = any;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"buildtargetresources-request",children:"BuildTargetResources: request"}),"\n",(0,i.jsx)(n.p,{children:"The build target resources request is sent from the client to the server to\nquery for the list of resources of a given list of build targets."}),"\n",(0,i.jsx)(n.p,{children:"A resource is a data dependency required to be present in the runtime classpath\nwhen a build target is run or executed. The server communicates during the\ninitialize handshake whether this method is supported or not."}),"\n",(0,i.jsx)(n.p,{children:"This request can be used by a client to highlight the resources in a project\nview, for example."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"buildTarget/resources"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"ResourcesParams"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"ResourcesResult"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"resourcesparams",children:"ResourcesParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface ResourcesParams {\n  targets: BuildTargetIdentifier[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"resourcesresult",children:"ResourcesResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface ResourcesResult {\n  items: ResourcesItem[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"resourcesitem",children:"ResourcesItem"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface ResourcesItem {\n  target: BuildTargetIdentifier;\n\n  /** List of resource files. */\n  resources: URI[];\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"buildtargetoutputpaths-request",children:"BuildTargetOutputPaths: request"}),"\n",(0,i.jsx)(n.p,{children:"The build target output paths request is sent from the client to the server to\nquery for the list of output paths of a given list of build targets."}),"\n",(0,i.jsx)(n.p,{children:"An output path is a file or directory that contains output files such as build\nartifacts which IDEs may decide to exclude from indexing. The server communicates\nduring the initialize handshake whether this method is supported or not."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"buildTarget/outputPaths"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"OutputPathsParams"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"OutputPathsResult"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"outputpathsparams",children:"OutputPathsParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface OutputPathsParams {\n  targets: BuildTargetIdentifier[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"outputpathsresult",children:"OutputPathsResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface OutputPathsResult {\n  items: OutputPathsItem[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"outputpathsitem",children:"OutputPathsItem"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface OutputPathsItem {\n  /** A build target to which output paths item belongs. */\n  target: BuildTargetIdentifier;\n\n  /** Output paths. */\n  outputPaths: OutputPathItem[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"outputpathitem",children:"OutputPathItem"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export interface OutputPathItem {\n  /** Either a file or a directory. A directory entry must end with a forward\n   * slash "/" and a directory entry implies that every nested path within the\n   * directory belongs to this output item. */\n  uri: URI;\n\n  /** Type of file of the output item, such as whether it is file or directory. */\n  kind: OutputPathItemKind;\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"outputpathitemkind",children:"OutputPathItemKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export enum OutputPathItemKind {\n  /** The output path item references a normal file. */\n  File = 1,\n\n  /** The output path item references a directory. */\n  Directory = 2,\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"buildtargetcompile-request",children:"BuildTargetCompile: request"}),"\n",(0,i.jsxs)(n.p,{children:["The compile build target request is sent from the client to the server to\ncompile the given list of build targets. The server communicates during the\ninitialize handshake whether this method is supported or not. This method can\nfor example be used by a language server before ",(0,i.jsx)(n.code,{children:"textDocument/rename"})," to ensure\nthat all workspace sources typecheck correctly and are up-to-date."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"buildTarget/compile"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"CompileParams"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"CompileResult"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"compileparams",children:"CompileParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface CompileParams {\n  /** A sequence of build targets to compile. */\n  targets: BuildTargetIdentifier[];\n\n  /** A unique identifier generated by the client to identify this request.\n   * The server may include this id in triggered notifications or responses. */\n  originId?: Identifier;\n\n  /** Optional arguments to the compilation process. */\n  arguments?: string[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"compileresult",children:"CompileResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface CompileResult {\n  /** An optional request id to know the origin of this report. */\n  originId?: Identifier;\n\n  /** A status code for the execution. */\n  statusCode: StatusCode;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: CompileResultDataKind;\n\n  /** A field containing language-specific information, like products\n   * of compilation or compiler-specific metadata the client needs to know. */\n  data?: CompileResultData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"compileresultdatakind",children:"CompileResultDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type CompileResultDataKind = string;\n\nexport namespace CompileResultDataKind {}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"compileresultdata",children:"CompileResultData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type CompileResultData = any;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"buildtargetrun-request",children:"BuildTargetRun: request"}),"\n",(0,i.jsx)(n.p,{children:"The run request is sent from the client to the server to run a build target. The\nserver communicates during the initialize handshake whether this method is\nsupported or not."}),"\n",(0,i.jsx)(n.p,{children:"Note that a run request containing only the target id is valid.\nIf no further parameters are provided, the server should use the default ones."}),"\n",(0,i.jsx)(n.p,{children:"Implementation notes:"}),"\n",(0,i.jsxs)(n.p,{children:["This request may trigger a compilation on the selected build targets. The server\nis free to send any number of ",(0,i.jsx)(n.code,{children:"build/task*"}),", ",(0,i.jsx)(n.code,{children:"build/publishDiagnostics"})," and\n",(0,i.jsx)(n.code,{children:"build/logMessage"})," notifications during compilation before completing the\nresponse."]}),"\n",(0,i.jsxs)(n.p,{children:["The client will get a ",(0,i.jsx)(n.code,{children:"originId"})," field in ",(0,i.jsx)(n.code,{children:"RunResult"})," if and only if\nthe ",(0,i.jsx)(n.code,{children:"originId"})," field in the ",(0,i.jsx)(n.code,{children:"RunParams"})," is defined."]}),"\n",(0,i.jsx)(n.p,{children:"Cancelling this request must kill the running process."}),"\n",(0,i.jsxs)(n.p,{children:["If the BSP server wishes to forward the stdout and stderr streams of the running process\nto the client, it can do so by sending ",(0,i.jsx)(n.code,{children:"run/printStdout"})," and ",(0,i.jsx)(n.code,{children:"run/printStderr"})," notifications."]}),"\n",(0,i.jsxs)(n.p,{children:["If the client wishes to send input to the running process, it can do so by sending\n",(0,i.jsx)(n.code,{children:"run/readStdin"})," notifications to the server."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"buildTarget/run"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"RunParams"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"RunResult"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"runparams",children:"RunParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface RunParams {\n  /** The build target to run. */\n  target: BuildTargetIdentifier;\n\n  /** A unique identifier generated by the client to identify this request.\n   * The server may include this id in triggered notifications or responses. */\n  originId?: Identifier;\n\n  /** Optional arguments to the executed application. */\n  arguments?: string[];\n\n  /** Optional environment variables to set before running the application. */\n  environmentVariables?: EnvironmentVariables;\n\n  /** Optional working directory */\n  workingDirectory?: URI;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: RunParamsDataKind;\n\n  /** Language-specific metadata for this execution.\n   * See ScalaMainClass as an example. */\n  data?: RunParamsData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"runparamsdatakind",children:"RunParamsDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export type RunParamsDataKind = string;\n\nexport namespace RunParamsDataKind {\n  /** `data` field must contain a ScalaMainClass object. */\n  export const ScalaMainClass = "scala-main-class";\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"runparamsdata",children:"RunParamsData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type RunParamsData = any;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"runresult",children:"RunResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface RunResult {\n  /** An optional request id to know the origin of this report. */\n  originId?: Identifier;\n\n  /** A status code for the execution. */\n  statusCode: StatusCode;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"buildtargettest-request",children:"BuildTargetTest: request"}),"\n",(0,i.jsx)(n.p,{children:"The test build target request is sent from the client to the server to test the\ngiven list of build targets. The server communicates during the initialize\nhandshake whether this method is supported or not."}),"\n",(0,i.jsxs)(n.p,{children:['The "Implementation notes" section of the ',(0,i.jsx)(n.code,{children:"buildTarget/run"})," request applies to\nthis request as well."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"buildTarget/test"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"TestParams"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"TestResult"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"testparams",children:"TestParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface TestParams {\n  /** A sequence of build targets to test. */\n  targets: BuildTargetIdentifier[];\n\n  /** A unique identifier generated by the client to identify this request.\n   * The server may include this id in triggered notifications or responses. */\n  originId?: Identifier;\n\n  /** Optional arguments to the test execution engine. */\n  arguments?: string[];\n\n  /** Optional environment variables to set before running the tests. */\n  environmentVariables?: EnvironmentVariables;\n\n  /** Optional working directory */\n  workingDirectory?: URI;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: TestParamsDataKind;\n\n  /** Language-specific metadata about for this test execution.\n   * See ScalaTestParams as an example. */\n  data?: TestParamsData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"testparamsdatakind",children:"TestParamsDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export type TestParamsDataKind = string;\n\nexport namespace TestParamsDataKind {\n  /** `data` field must contain a ScalaTestParams object. */\n  export const ScalaTest = "scala-test";\n\n  /** `data` field must contain a ScalaTestSuiteClasses object. */\n  export const ScalaTestSuites = "scala-test-suites";\n\n  /** `data` field must contain a ScalaTestSuites object. */\n  export const ScalaTestSuitesSelection = "scala-test-suites-selection";\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"testparamsdata",children:"TestParamsData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type TestParamsData = any;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"testresult",children:"TestResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface TestResult {\n  /** An optional request id to know the origin of this report. */\n  originId?: Identifier;\n\n  /** A status code for the execution. */\n  statusCode: StatusCode;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: TestResultDataKind;\n\n  /** Language-specific metadata about the test result.\n   * See ScalaTestParams as an example. */\n  data?: TestResultData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"testresultdatakind",children:"TestResultDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type TestResultDataKind = string;\n\nexport namespace TestResultDataKind {}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"testresultdata",children:"TestResultData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type TestResultData = any;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"debugsessionstart-request",children:"DebugSessionStart: request"}),"\n",(0,i.jsxs)(n.p,{children:["The debug request is sent from the client to the server to debug build target(s). The\nserver launches a ",(0,i.jsx)(n.a,{href:"https://microsoft.github.io/debug-adapter-protocol/",children:"Microsoft DAP"})," server\nand returns a connection URI for the client to interact with."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"debugSession/start"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"DebugSessionParams"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"DebugSessionAddress"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"debugsessionparams",children:"DebugSessionParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface DebugSessionParams {\n  /** A sequence of build targets affected by the debugging action. */\n  targets: BuildTargetIdentifier[];\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: DebugSessionParamsDataKind;\n\n  /** Language-specific metadata for this execution.\n   * See ScalaMainClass as an example. */\n  data?: DebugSessionParamsData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"debugsessionparamsdatakind",children:"DebugSessionParamsDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export type DebugSessionParamsDataKind = string;\n\nexport namespace DebugSessionParamsDataKind {\n  /** `data` field must contain a ScalaAttachRemote object. */\n  export const ScalaAttachRemote = "scala-attach-remote";\n\n  /** `data` field must contain a ScalaMainClass object. */\n  export const ScalaMainClass = "scala-main-class";\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"debugsessionparamsdata",children:"DebugSessionParamsData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type DebugSessionParamsData = any;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"debugsessionaddress",children:"DebugSessionAddress"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface DebugSessionAddress {\n  /** The Debug Adapter Protocol server's connection uri */\n  uri: URI;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"buildtargetcleancache-request",children:"BuildTargetCleanCache: request"}),"\n",(0,i.jsx)(n.p,{children:"The clean cache request is sent from the client to the server to reset any state\nassociated with a given build target. The state can live either in the build\ntool or in the file system."}),"\n",(0,i.jsx)(n.p,{children:"The build tool defines the exact semantics of the clean cache request:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Stateless build tools are free to ignore the request and respond with a\nsuccessful response."}),"\n",(0,i.jsx)(n.li,{children:"Stateful build tools must ensure that invoking compilation on a target that\nhas been cleaned results in a full compilation."}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"buildTarget/cleanCache"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"CleanCacheParams"})]}),"\n",(0,i.jsxs)(n.li,{children:["result: ",(0,i.jsx)(n.code,{children:"CleanCacheResult"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"cleancacheparams",children:"CleanCacheParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface CleanCacheParams {\n  /** The build targets to clean. */\n  targets: BuildTargetIdentifier[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"cleancacheresult",children:"CleanCacheResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface CleanCacheResult {\n  /** Optional message to display to the user. */\n  message?: string;\n\n  /** Indicates whether the clean cache request was performed or not. */\n  cleaned: boolean;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onrunreadstdin-notification",children:"OnRunReadStdin: notification"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Unstable"})," (may change in future versions)"]}),"\n",(0,i.jsx)(n.p,{children:"Notification sent from the client to the server when the user wants to send\ninput to the stdin of the running target."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"run/readStdin"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"ReadParams"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"readparams",children:"ReadParams"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Unstable"})," (may change in future versions)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface ReadParams {\n  /** The id of the request. */\n  originId: Identifier;\n\n  /** Relevant only for test tasks.\n   * Allows to tell the client from which task the output is coming from. */\n  task?: TaskId;\n\n  /** Message content can contain arbitrary bytes.\n   * They should be escaped as per [javascript encoding](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#using_special_characters_in_strings) */\n  message: string;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"bsp-client-remote-interface",children:"BSP Client remote interface"}),"\n",(0,i.jsx)(n.h3,{id:"onbuildshowmessage-notification",children:"OnBuildShowMessage: notification"}),"\n",(0,i.jsx)(n.p,{children:"The show message notification is sent from a server to a client to ask the client to display a particular message in the user interface."}),"\n",(0,i.jsx)(n.p,{children:"A build/showMessage notification is similar to LSP's window/showMessage, except for a few additions like id and originId."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"build/showMessage"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"ShowMessageParams"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"showmessageparams",children:"ShowMessageParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface ShowMessageParams {\n  /** the message type. */\n  type: MessageType;\n\n  /** The task id if any. */\n  task?: TaskId;\n\n  /** The request id that originated this notification.\n   * The originId field helps clients know which request originated a notification in case several requests are handled by the\n   * client at the same time. It will only be populated if the client defined it in the request that triggered this notification. */\n  originId?: OriginId;\n\n  /** The actual message. */\n  message: string;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"messagetype",children:"MessageType"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export enum MessageType {\n  /** An error message. */\n  Error = 1,\n\n  /** A warning message. */\n  Warning = 2,\n\n  /** An information message. */\n  Info = 3,\n\n  /** A log message. */\n  Log = 4,\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onbuildlogmessage-notification",children:"OnBuildLogMessage: notification"}),"\n",(0,i.jsx)(n.p,{children:"The log message notification is sent from a server to a client to ask the client to log a particular message in its console."}),"\n",(0,i.jsx)(n.p,{children:"A build/logMessage notification is similar to LSP's window/logMessage, except for a few additions like id and originId."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"build/logMessage"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"LogMessageParams"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"logmessageparams",children:"LogMessageParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface LogMessageParams {\n  /** the message type. */\n  type: MessageType;\n\n  /** The task id if any. */\n  task?: TaskId;\n\n  /** The request id that originated this notification.\n   * The originId field helps clients know which request originated a notification in case several requests are handled by the\n   * client at the same time. It will only be populated if the client defined it in the request that triggered this notification. */\n  originId?: OriginId;\n\n  /** The actual message. */\n  message: string;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onbuildpublishdiagnostics-notification",children:"OnBuildPublishDiagnostics: notification"}),"\n",(0,i.jsx)(n.p,{children:"The Diagnostics notification are sent from the server to the client to signal results of validation runs."}),"\n",(0,i.jsx)(n.p,{children:"When reset is true, the client must clean all previous diagnostics associated with the same textDocument and\nbuildTarget and set instead the diagnostics in the request. This is the same behaviour as PublishDiagnosticsParams\nin the LSP. When reset is false, the diagnostics are added to the last active diagnostics, allowing build tools to\nstream diagnostics to the client."}),"\n",(0,i.jsx)(n.p,{children:"It is the server's responsibility to manage the lifetime of the diagnostics by using the appropriate value in the reset field.\nClients generate new diagnostics by calling any BSP endpoint that triggers a buildTarget/compile, such as buildTarget/compile, buildTarget/test and buildTarget/run."}),"\n",(0,i.jsx)(n.p,{children:"If the computed set of diagnostic is empty, the server must push an empty array with reset set to true, in order to clear previous diagnostics."}),"\n",(0,i.jsx)(n.p,{children:"The optional originId field in the definition of PublishDiagnosticsParams can be used by clients to know which request originated the notification.\nThis field will be defined if the client defined it in the original request that triggered this notification."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"build/publishDiagnostics"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"PublishDiagnosticsParams"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"publishdiagnosticsparams",children:"PublishDiagnosticsParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface PublishDiagnosticsParams {\n  /** The document where the diagnostics are published. */\n  textDocument: TextDocumentIdentifier;\n\n  /** The build target where the diagnostics origin.\n   * It is valid for one text document to belong to multiple\n   * build targets, for example sources that are compiled against multiple\n   * platforms (JVM, JavaScript). */\n  buildTarget: BuildTargetIdentifier;\n\n  /** The request id that originated this notification. */\n  originId?: OriginId;\n\n  /** The diagnostics to be published by the client. */\n  diagnostics: Diagnostic[];\n\n  /** Whether the client should clear the previous diagnostics\n   * mapped to the same `textDocument` and `buildTarget`. */\n  reset: boolean;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"diagnostic",children:"Diagnostic"}),"\n",(0,i.jsx)(n.p,{children:"Diagnostic is defined as it is in the LSP."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface Diagnostic {\n  /** The range at which the message applies. */\n  range: Range;\n\n  /** The diagnostic's severity. Can be omitted. If omitted it is up to the\n   * client to interpret diagnostics as error, warning, info or hint. */\n  severity?: DiagnosticSeverity;\n\n  /** The diagnostic's code, which might appear in the user interface. */\n  code?: string | Integer;\n\n  /** An optional property to describe the error code. */\n  codeDescription?: CodeDescription;\n\n  /** A human-readable string describing the source of this\n   * diagnostic, e.g. 'typescript' or 'super lint'. */\n  source?: string;\n\n  /** The diagnostic's message. */\n  message: string;\n\n  /** Additional metadata about the diagnostic. */\n  tags?: DiagnosticTag[];\n\n  /** An array of related diagnostic information, e.g. when symbol-names within\n   * a scope collide all definitions can be marked via this property. */\n  relatedInformation?: DiagnosticRelatedInformation[];\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: DiagnosticDataKind;\n\n  /** A data entry field that is preserved between a\n   * `textDocument/publishDiagnostics` notification and\n   * `textDocument/codeAction` request. */\n  data?: DiagnosticData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"range",children:"Range"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface Range {\n  /** The range's start position. */\n  start: Position;\n\n  /** The range's end position. */\n  end: Position;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"position",children:"Position"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface Position {\n  /** Line position in a document (zero-based). */\n  line: Integer;\n\n  /** Character offset on a line in a document (zero-based)\n   *\n   * If the character value is greater than the line length it defaults back\n   * to the line length. */\n  character: Integer;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"diagnosticseverity",children:"DiagnosticSeverity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export enum DiagnosticSeverity {\n  /** Reports an error. */\n  Error = 1,\n\n  /** Reports a warning. */\n  Warning = 2,\n\n  /** Reports an information. */\n  Information = 3,\n\n  /** Reports a hint. */\n  Hint = 4,\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"codedescription",children:"CodeDescription"}),"\n",(0,i.jsx)(n.p,{children:"Structure to capture a description for an error code."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface CodeDescription {\n  /** An URI to open with more information about the diagnostic error. */\n  href: URI;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"diagnostictag",children:"DiagnosticTag"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type DiagnosticTag = number;\n\nexport namespace DiagnosticTag {\n  /** Unused or unnecessary code.\n   *\n   * Clients are allowed to render diagnostics with this tag faded out\n   * instead of having an error squiggle. */\n  export const Unnecessary = 1;\n\n  /** Deprecated or obsolete code.\n   *\n   * Clients are allowed to rendered diagnostics with this tag strike through. */\n  export const Deprecated = 2;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"diagnosticrelatedinformation",children:"DiagnosticRelatedInformation"}),"\n",(0,i.jsx)(n.p,{children:"Represents a related message and source code location for a diagnostic.\nThis should be used to point to code locations that cause or are related to\na diagnostics, e.g when duplicating a symbol in a scope."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface DiagnosticRelatedInformation {\n  /** The location of this related diagnostic information. */\n  location: Location;\n\n  /** The message of this related diagnostic information. */\n  message: string;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"location",children:"Location"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface Location {\n  uri: URI;\n\n  range: Range;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"diagnosticdatakind",children:"DiagnosticDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export type DiagnosticDataKind = string;\n\nexport namespace DiagnosticDataKind {\n  /** `data` field must contain a ScalaDiagnostic object. */\n  export const Scala = "scala";\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"diagnosticdata",children:"DiagnosticData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type DiagnosticData = any;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onbuildtargetdidchange-notification",children:"OnBuildTargetDidChange: notification"}),"\n",(0,i.jsx)(n.p,{children:"The build target changed notification is sent from the server to the client to\nsignal a change in a build target. The server communicates during the initialize\nhandshake whether this method is supported or not."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"buildTarget/didChange"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"DidChangeBuildTarget"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"didchangebuildtarget",children:"DidChangeBuildTarget"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface DidChangeBuildTarget {\n  changes: BuildTargetEvent[];\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"buildtargetevent",children:"BuildTargetEvent"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface BuildTargetEvent {\n  /** The identifier for the changed build target */\n  target: BuildTargetIdentifier;\n\n  /** The kind of change for this build target */\n  kind?: BuildTargetEventKind;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: BuildTargetEventDataKind;\n\n  /** Any additional metadata about what information changed. */\n  data?: BuildTargetEventData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"buildtargeteventkind",children:"BuildTargetEventKind"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"BuildTargetEventKind"})," information can be used by clients to trigger\nreindexing or update the user interface with the new information."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export enum BuildTargetEventKind {\n  /** The build target is new. */\n  Created = 1,\n\n  /** The build target has changed. */\n  Changed = 2,\n\n  /** The build target has been deleted. */\n  Deleted = 3,\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"buildtargeteventdatakind",children:"BuildTargetEventDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type BuildTargetEventDataKind = string;\n\nexport namespace BuildTargetEventDataKind {}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"buildtargeteventdata",children:"BuildTargetEventData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type BuildTargetEventData = any;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onbuildtaskstart-notification",children:"OnBuildTaskStart: notification"}),"\n",(0,i.jsx)(n.p,{children:"The BSP server can inform the client on the execution state of any task in the\nbuild tool. The execution of some tasks, such as compilation or tests, must\nalways be reported by the server."}),"\n",(0,i.jsx)(n.p,{children:"The server may also send additional task notifications for actions not covered\nby the protocol, such as resolution or packaging. BSP clients can then display\nthis information to their users at their discretion."}),"\n",(0,i.jsxs)(n.p,{children:["When beginning a task, the server may send ",(0,i.jsx)(n.code,{children:"build/taskStart"}),", intermediate\nupdates may be sent in ",(0,i.jsx)(n.code,{children:"build/taskProgress"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If a ",(0,i.jsx)(n.code,{children:"build/taskStart"})," notification has been sent, the server must send\n",(0,i.jsx)(n.code,{children:"build/taskFinish"})," on completion of the same task."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"build/taskStart"}),", ",(0,i.jsx)(n.code,{children:"build/taskProgress"})," and ",(0,i.jsx)(n.code,{children:"build/taskFinish"})," notifications for\nthe same task must use the same ",(0,i.jsx)(n.code,{children:"taskId"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Tasks that are spawned by another task should reference the originating task's\n",(0,i.jsx)(n.code,{children:"taskId"})," in their own ",(0,i.jsx)(n.code,{children:"taskId"}),"'s ",(0,i.jsx)(n.code,{children:"parent"})," field. Tasks spawned directly by a\nrequest should reference the request's ",(0,i.jsx)(n.code,{children:"originId"})," parent."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"build/taskStart"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"TaskStartParams"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"taskstartparams",children:"TaskStartParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface TaskStartParams {\n  /** Unique id of the task with optional reference to parent task id */\n  taskId: TaskId;\n\n  /** A unique identifier generated by the client to identify this request. */\n  originId?: Identifier;\n\n  /** Timestamp of when the event started in milliseconds since Epoch. */\n  eventTime?: Long;\n\n  /** Message describing the task. */\n  message?: string;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: TaskStartDataKind;\n\n  /** Optional metadata about the task.\n   * Objects for specific tasks like compile, test, etc are specified in the protocol. */\n  data?: TaskStartData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"taskstartdatakind",children:"TaskStartDataKind"}),"\n",(0,i.jsxs)(n.p,{children:["Task start notifications may contain an arbitrary interface in their ",(0,i.jsx)(n.code,{children:"data"}),"\nfield. The kind of interface that is contained in a notification must be\nspecified in the ",(0,i.jsx)(n.code,{children:"dataKind"})," field."]}),"\n",(0,i.jsx)(n.p,{children:"There are predefined kinds of objects for compile and test tasks, as described\nin [[bsp#BuildTargetCompile]] and [[bsp#BuildTargetTest]]"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export type TaskStartDataKind = string;\n\nexport namespace TaskStartDataKind {\n  /** `data` field must contain a CompileTask object. */\n  export const CompileTask = "compile-task";\n\n  /** `data` field must contain a TestStart object. */\n  export const TestStart = "test-start";\n\n  /** `data` field must contain a TestTask object. */\n  export const TestTask = "test-task";\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"taskstartdata",children:"TaskStartData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type TaskStartData = any;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onbuildtaskprogress-notification",children:"OnBuildTaskProgress: notification"}),"\n",(0,i.jsxs)(n.p,{children:["After a ",(0,i.jsx)(n.code,{children:"taskStart"})," and before ",(0,i.jsx)(n.code,{children:"taskFinish"})," for a ",(0,i.jsx)(n.code,{children:"taskId"}),", the server may send\nany number of progress notifications."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"build/taskProgress"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"TaskProgressParams"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"taskprogressparams",children:"TaskProgressParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export interface TaskProgressParams {\n  /** Unique id of the task with optional reference to parent task id */\n  taskId: TaskId;\n\n  /** A unique identifier generated by the client to identify this request. */\n  originId?: Identifier;\n\n  /** Timestamp of when the event started in milliseconds since Epoch. */\n  eventTime?: Long;\n\n  /** Message describing the task. */\n  message?: string;\n\n  /** If known, total amount of work units in this task. */\n  total?: Long;\n\n  /** If known, completed amount of work units in this task. */\n  progress?: Long;\n\n  /** Name of a work unit. For example, "files" or "tests". May be empty. */\n  unit?: string;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: TaskProgressDataKind;\n\n  /** Optional metadata about the task.\n   * Objects for specific tasks like compile, test, etc are specified in the protocol. */\n  data?: TaskProgressData;\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"taskprogressdatakind",children:"TaskProgressDataKind"}),"\n",(0,i.jsxs)(n.p,{children:["Task progress notifications may contain an arbitrary interface in their ",(0,i.jsx)(n.code,{children:"data"}),"\nfield. The kind of interface that is contained in a notification must be\nspecified in the ",(0,i.jsx)(n.code,{children:"dataKind"})," field."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type TaskProgressDataKind = string;\n\nexport namespace TaskProgressDataKind {}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"taskprogressdata",children:"TaskProgressData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type TaskProgressData = any;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onbuildtaskfinish-notification",children:"OnBuildTaskFinish: notification"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"build/taskFinish"})," notification must always be sent after a ",(0,i.jsx)(n.code,{children:"build/taskStart"}),"\nwith the same ",(0,i.jsx)(n.code,{children:"taskId"})," was sent."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"build/taskFinish"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"TaskFinishParams"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"taskfinishparams",children:"TaskFinishParams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface TaskFinishParams {\n  /** Unique id of the task with optional reference to parent task id */\n  taskId: TaskId;\n\n  /** A unique identifier generated by the client to identify this request. */\n  originId?: Identifier;\n\n  /** Timestamp of when the event started in milliseconds since Epoch. */\n  eventTime?: Long;\n\n  /** Message describing the task. */\n  message?: string;\n\n  /** Task completion status. */\n  status: StatusCode;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: TaskFinishDataKind;\n\n  /** Optional metadata about the task.\n   * Objects for specific tasks like compile, test, etc are specified in the protocol. */\n  data?: TaskFinishData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"taskfinishdatakind",children:"TaskFinishDataKind"}),"\n",(0,i.jsxs)(n.p,{children:["Task finish notifications may contain an arbitrary interface in their ",(0,i.jsx)(n.code,{children:"data"}),"\nfield. The kind of interface that is contained in a notification must be\nspecified in the ",(0,i.jsx)(n.code,{children:"dataKind"})," field."]}),"\n",(0,i.jsx)(n.p,{children:"There are predefined kinds of objects for compile and test tasks, as described\nin [[bsp#BuildTargetCompile]] and [[bsp#BuildTargetTest]]"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export type TaskFinishDataKind = string;\n\nexport namespace TaskFinishDataKind {\n  /** `data` field must contain a CompileReport object. */\n  export const CompileReport = "compile-report";\n\n  /** `data` field must contain a TestFinish object. */\n  export const TestFinish = "test-finish";\n\n  /** `data` field must contain a TestReport object. */\n  export const TestReport = "test-report";\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"taskfinishdata",children:"TaskFinishData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type TaskFinishData = any;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onrunprintstdout-notification",children:"OnRunPrintStdout: notification"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Unstable"})," (may change in future versions)"]}),"\n",(0,i.jsx)(n.p,{children:"Notification sent from the server to the client when the target being run or tested\nprints something to stdout."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"run/printStdout"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"PrintParams"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"printparams",children:"PrintParams"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Unstable"})," (may change in future versions)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface PrintParams {\n  /** The id of the request. */\n  originId: Identifier;\n\n  /** Relevant only for test tasks.\n   * Allows to tell the client from which task the output is coming from. */\n  task?: TaskId;\n\n  /** Message content can contain arbitrary bytes.\n   * They should be escaped as per [javascript encoding](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#using_special_characters_in_strings) */\n  message: string;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onrunprintstderr-notification",children:"OnRunPrintStderr: notification"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Unstable"})," (may change in future versions)"]}),"\n",(0,i.jsx)(n.p,{children:"Notification sent from the server to the client when the target being run or tested\nprints something to stderr."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["method: ",(0,i.jsx)(n.code,{children:"run/printStderr"})]}),"\n",(0,i.jsxs)(n.li,{children:["params: ",(0,i.jsx)(n.code,{children:"PrintParams"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"taskfinishdata-kinds",children:"TaskFinishData kinds"}),"\n",(0,i.jsx)(n.h3,{id:"compilereport",children:"CompileReport"}),"\n",(0,i.jsxs)(n.p,{children:["This structure is embedded in\nthe ",(0,i.jsx)(n.code,{children:"data?: TaskFinishData"})," field, when\nthe ",(0,i.jsx)(n.code,{children:"dataKind"})," field contains ",(0,i.jsx)(n.code,{children:'"compile-report"'}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"compilereport-1",children:"CompileReport"}),"\n",(0,i.jsxs)(n.p,{children:["The completion of a compilation task should be signalled with a\n",(0,i.jsx)(n.code,{children:"build/taskFinish"})," notification. When the compilation unit is a build target,\nthe notification's ",(0,i.jsx)(n.code,{children:"dataKind"})," field must be ",(0,i.jsx)(n.code,{children:"compile-report"})," and the ",(0,i.jsx)(n.code,{children:"data"}),"\nfield must include a ",(0,i.jsx)(n.code,{children:"CompileReport"})," object:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface CompileReport {\n  /** The build target that was compiled. */\n  target: BuildTargetIdentifier;\n\n  /** An optional request id to know the origin of this report.\n   * Deprecated: Use the field in TaskFinishParams instead */\n  originId?: Identifier;\n\n  /** The total number of reported errors compiling this target. */\n  errors: Integer;\n\n  /** The total number of reported warnings compiling the target. */\n  warnings: Integer;\n\n  /** The total number of milliseconds it took to compile the target. */\n  time?: Long;\n\n  /** The compilation was a noOp compilation. */\n  noOp?: boolean;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testfinish",children:"TestFinish"}),"\n",(0,i.jsxs)(n.p,{children:["This structure is embedded in\nthe ",(0,i.jsx)(n.code,{children:"data?: TaskFinishData"})," field, when\nthe ",(0,i.jsx)(n.code,{children:"dataKind"})," field contains ",(0,i.jsx)(n.code,{children:'"test-finish"'}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"testfinish-1",children:"TestFinish"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface TestFinish {\n  /** Name or description of the test. */\n  displayName: string;\n\n  /** Information about completion of the test, for example an error message. */\n  message?: string;\n\n  /** Completion status of the test. */\n  status: TestStatus;\n\n  /** Source location of the test, as LSP location. */\n  location?: Location;\n\n  /** Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified. */\n  dataKind?: TestFinishDataKind;\n\n  /** Optionally, structured metadata about the test completion.\n   * For example: stack traces, expected/actual values. */\n  data?: TestFinishData;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"teststatus",children:"TestStatus"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export enum TestStatus {\n  /** The test passed successfully. */\n  Passed = 1,\n\n  /** The test failed. */\n  Failed = 2,\n\n  /** The test was marked as ignored. */\n  Ignored = 3,\n\n  /** The test execution was cancelled. */\n  Cancelled = 4,\n\n  /** The was not included in execution. */\n  Skipped = 5,\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"testfinishdatakind",children:"TestFinishDataKind"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type TestFinishDataKind = string;\n\nexport namespace TestFinishDataKind {}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"testfinishdata",children:"TestFinishData"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export type TestFinishData = any;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testreport",children:"TestReport"}),"\n",(0,i.jsxs)(n.p,{children:["This structure is embedded in\nthe ",(0,i.jsx)(n.code,{children:"data?: TaskFinishData"})," field, when\nthe ",(0,i.jsx)(n.code,{children:"dataKind"})," field contains ",(0,i.jsx)(n.code,{children:'"test-report"'}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"testreport-1",children:"TestReport"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface TestReport {\n  /** Deprecated: Use the field in TaskFinishParams instead */\n  originId?: Identifier;\n\n  /** The build target that was compiled. */\n  target: BuildTargetIdentifier;\n\n  /** The total number of successful tests. */\n  passed: Integer;\n\n  /** The total number of failed tests. */\n  failed: Integer;\n\n  /** The total number of ignored tests. */\n  ignored: Integer;\n\n  /** The total number of cancelled tests. */\n  cancelled: Integer;\n\n  /** The total number of skipped tests. */\n  skipped: Integer;\n\n  /** The total number of milliseconds tests take to run (e.g. doesn't include compile times). */\n  time?: Long;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"taskstartdata-kinds",children:"TaskStartData kinds"}),"\n",(0,i.jsx)(n.h3,{id:"compiletask",children:"CompileTask"}),"\n",(0,i.jsxs)(n.p,{children:["This structure is embedded in\nthe ",(0,i.jsx)(n.code,{children:"data?: TaskStartData"})," field, when\nthe ",(0,i.jsx)(n.code,{children:"dataKind"})," field contains ",(0,i.jsx)(n.code,{children:'"compile-task"'}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"compiletask-1",children:"CompileTask"}),"\n",(0,i.jsxs)(n.p,{children:["The beginning of a compilation unit may be signalled to the client with a\n",(0,i.jsx)(n.code,{children:"build/taskStart"})," notification. When the compilation unit is a build target, the\nnotification's ",(0,i.jsx)(n.code,{children:"dataKind"}),' field must be "compile-task" and the ',(0,i.jsx)(n.code,{children:"data"})," field must\ninclude a ",(0,i.jsx)(n.code,{children:"CompileTask"})," object:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface CompileTask {\n  target: BuildTargetIdentifier;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"teststart",children:"TestStart"}),"\n",(0,i.jsxs)(n.p,{children:["This structure is embedded in\nthe ",(0,i.jsx)(n.code,{children:"data?: TaskStartData"})," field, when\nthe ",(0,i.jsx)(n.code,{children:"dataKind"})," field contains ",(0,i.jsx)(n.code,{children:'"test-start"'}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"teststart-1",children:"TestStart"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface TestStart {\n  /** Name or description of the test. */\n  displayName: string;\n\n  /** Source location of the test, as LSP location. */\n  location?: Location;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testtask",children:"TestTask"}),"\n",(0,i.jsxs)(n.p,{children:["This structure is embedded in\nthe ",(0,i.jsx)(n.code,{children:"data?: TaskStartData"})," field, when\nthe ",(0,i.jsx)(n.code,{children:"dataKind"})," field contains ",(0,i.jsx)(n.code,{children:'"test-task"'}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"testtask-1",children:"TestTask"}),"\n",(0,i.jsxs)(n.p,{children:["The beginning of a testing unit may be signalled to the client with a\n",(0,i.jsx)(n.code,{children:"build/taskStart"})," notification. When the testing unit is a build target, the\nnotification's ",(0,i.jsx)(n.code,{children:"dataKind"})," field must be ",(0,i.jsx)(n.code,{children:"test-task"})," and the ",(0,i.jsx)(n.code,{children:"data"})," field must\ninclude a ",(0,i.jsx)(n.code,{children:"TestTask"})," object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export interface TestTask {\n  target: BuildTargetIdentifier;\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8379:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(2515);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);